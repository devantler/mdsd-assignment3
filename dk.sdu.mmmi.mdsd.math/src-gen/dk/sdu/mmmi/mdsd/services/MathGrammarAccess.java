/*
 * generated by Xtext 2.26.0
 */
package dk.sdu.mmmi.mdsd.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MathGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesGlobalVariableParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		
		//Model:
		//    'program' name=ID
		//    variables+=GlobalVariable*;
		@Override public ParserRule getRule() { return rule; }
		
		//'program' name=ID
		//variables+=GlobalVariable*
		public Group getGroup() { return cGroup; }
		
		//'program'
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//variables+=GlobalVariable*
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }
		
		//GlobalVariable
		public RuleCall getVariablesGlobalVariableParserRuleCall_2_0() { return cVariablesGlobalVariableParserRuleCall_2_0; }
	}
	public class GlobalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.GlobalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGlobalVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVarKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionAdditionAndSubtractionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//GlobalVariable returns Variable:
		//    {GlobalVariable} 'var' name=ID '=' expression=AdditionAndSubtractionExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//{GlobalVariable} 'var' name=ID '=' expression=AdditionAndSubtractionExpression
		public Group getGroup() { return cGroup; }
		
		//{GlobalVariable}
		public Action getGlobalVariableAction_0() { return cGlobalVariableAction_0; }
		
		//'var'
		public Keyword getVarKeyword_1() { return cVarKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//expression=AdditionAndSubtractionExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//AdditionAndSubtractionExpression
		public RuleCall getExpressionAdditionAndSubtractionExpressionParserRuleCall_4_0() { return cExpressionAdditionAndSubtractionExpressionParserRuleCall_4_0; }
	}
	public class LocalVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.LocalVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLocalVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLocal_expressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLocal_expressionAdditionAndSubtractionExpressionParserRuleCall_4_0 = (RuleCall)cLocal_expressionAssignment_4.eContents().get(0);
		private final Keyword cInKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionAdditionAndSubtractionExpressionParserRuleCall_6_0 = (RuleCall)cExpressionAssignment_6.eContents().get(0);
		private final Keyword cEndKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//LocalVariable returns Variable:
		//    {LocalVariable} 'let' name=ID '=' local_expression=AdditionAndSubtractionExpression 'in'
		//    expression=AdditionAndSubtractionExpression 'end';
		@Override public ParserRule getRule() { return rule; }
		
		//{LocalVariable} 'let' name=ID '=' local_expression=AdditionAndSubtractionExpression 'in'
		//expression=AdditionAndSubtractionExpression 'end'
		public Group getGroup() { return cGroup; }
		
		//{LocalVariable}
		public Action getLocalVariableAction_0() { return cLocalVariableAction_0; }
		
		//'let'
		public Keyword getLetKeyword_1() { return cLetKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3() { return cEqualsSignKeyword_3; }
		
		//local_expression=AdditionAndSubtractionExpression
		public Assignment getLocal_expressionAssignment_4() { return cLocal_expressionAssignment_4; }
		
		//AdditionAndSubtractionExpression
		public RuleCall getLocal_expressionAdditionAndSubtractionExpressionParserRuleCall_4_0() { return cLocal_expressionAdditionAndSubtractionExpressionParserRuleCall_4_0; }
		
		//'in'
		public Keyword getInKeyword_5() { return cInKeyword_5; }
		
		//expression=AdditionAndSubtractionExpression
		public Assignment getExpressionAssignment_6() { return cExpressionAssignment_6; }
		
		//AdditionAndSubtractionExpression
		public RuleCall getExpressionAdditionAndSubtractionExpressionParserRuleCall_6_0() { return cExpressionAdditionAndSubtractionExpressionParserRuleCall_6_0; }
		
		//'end'
		public Keyword getEndKeyword_7() { return cEndKeyword_7; }
	}
	public class AdditionAndSubtractionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.AdditionAndSubtractionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationAndDivisionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMultiplicationAndDivisionExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//AdditionAndSubtractionExpression returns Expression:
		//    MultiplicationAndDivisionExpression (({Plus.left=current} '+' | {Minus.left=current} '-')
		//    right=MultiplicationAndDivisionExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplicationAndDivisionExpression (({Plus.left=current} '+' | {Minus.left=current} '-')
		//right=MultiplicationAndDivisionExpression)*
		public Group getGroup() { return cGroup; }
		
		//MultiplicationAndDivisionExpression
		public RuleCall getMultiplicationAndDivisionExpressionParserRuleCall_0() { return cMultiplicationAndDivisionExpressionParserRuleCall_0; }
		
		//(({Plus.left=current} '+' | {Minus.left=current} '-')
		//   right=MultiplicationAndDivisionExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Plus.left=current} '+' | {Minus.left=current} '-')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Plus.left=current} '+'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }
		
		//{Minus.left=current} '-'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }
		
		//right=MultiplicationAndDivisionExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//MultiplicationAndDivisionExpression
		public RuleCall getRightMultiplicationAndDivisionExpressionParserRuleCall_1_1_0() { return cRightMultiplicationAndDivisionExpressionParserRuleCall_1_1_0; }
	}
	public class MultiplicationAndDivisionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.MultiplicationAndDivisionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cMultiplicationLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cDivisionLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightValueExpressionParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//MultiplicationAndDivisionExpression returns Expression:
		//    ValueExpression (({Multiplication.left=current} '*' | {Division.left=current} '/') right=ValueExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ValueExpression (({Multiplication.left=current} '*' | {Division.left=current} '/') right=ValueExpression)*
		public Group getGroup() { return cGroup; }
		
		//ValueExpression
		public RuleCall getValueExpressionParserRuleCall_0() { return cValueExpressionParserRuleCall_0; }
		
		//(({Multiplication.left=current} '*' | {Division.left=current} '/') right=ValueExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//({Multiplication.left=current} '*' | {Division.left=current} '/')
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }
		
		//{Multiplication.left=current} '*'
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0_0_0() { return cMultiplicationLeftAction_1_0_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_0_1() { return cAsteriskKeyword_1_0_0_1; }
		
		//{Division.left=current} '/'
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }
		
		//{Division.left=current}
		public Action getDivisionLeftAction_1_0_1_0() { return cDivisionLeftAction_1_0_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_0_1_1() { return cSolidusKeyword_1_0_1_1; }
		
		//right=ValueExpression
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }
		
		//ValueExpression
		public RuleCall getRightValueExpressionParserRuleCall_1_1_0() { return cRightValueExpressionParserRuleCall_1_1_0; }
	}
	public class ValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.ValueExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cParenthesisAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cParenthesizedExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cParenthesizedExpressionAdditionAndSubtractionExpressionParserRuleCall_0_2_0 = (RuleCall)cParenthesizedExpressionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumberAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final RuleCall cLocalVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ValueExpression returns Expression:
		//    {Parenthesis} '(' parenthesizedExpression=AdditionAndSubtractionExpression ')' | {Number} value=INT | LocalVariable
		//    | VariableReference;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parenthesis} '(' parenthesizedExpression=AdditionAndSubtractionExpression ')' | {Number} value=INT | LocalVariable
		//| VariableReference
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Parenthesis} '(' parenthesizedExpression=AdditionAndSubtractionExpression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Parenthesis}
		public Action getParenthesisAction_0_0() { return cParenthesisAction_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//parenthesizedExpression=AdditionAndSubtractionExpression
		public Assignment getParenthesizedExpressionAssignment_0_2() { return cParenthesizedExpressionAssignment_0_2; }
		
		//AdditionAndSubtractionExpression
		public RuleCall getParenthesizedExpressionAdditionAndSubtractionExpressionParserRuleCall_0_2_0() { return cParenthesizedExpressionAdditionAndSubtractionExpressionParserRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//{Number} value=INT
		public Group getGroup_1() { return cGroup_1; }
		
		//{Number}
		public Action getNumberAction_1_0() { return cNumberAction_1_0; }
		
		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }
		
		//LocalVariable
		public RuleCall getLocalVariableParserRuleCall_2() { return cLocalVariableParserRuleCall_2; }
		
		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_3() { return cVariableReferenceParserRuleCall_3; }
	}
	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mmmi.mdsd.Math.VariableReference");
		private final Assignment cVariableAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVariableVariableCrossReference_0 = (CrossReference)cVariableAssignment.eContents().get(0);
		private final RuleCall cVariableVariableIDTerminalRuleCall_0_1 = (RuleCall)cVariableVariableCrossReference_0.eContents().get(1);
		
		//VariableReference:
		//    variable=[Variable];
		@Override public ParserRule getRule() { return rule; }
		
		//variable=[Variable]
		public Assignment getVariableAssignment() { return cVariableAssignment; }
		
		//[Variable]
		public CrossReference getVariableVariableCrossReference_0() { return cVariableVariableCrossReference_0; }
		
		//ID
		public RuleCall getVariableVariableIDTerminalRuleCall_0_1() { return cVariableVariableIDTerminalRuleCall_0_1; }
	}
	
	
	private final ModelElements pModel;
	private final GlobalVariableElements pGlobalVariable;
	private final LocalVariableElements pLocalVariable;
	private final AdditionAndSubtractionExpressionElements pAdditionAndSubtractionExpression;
	private final MultiplicationAndDivisionExpressionElements pMultiplicationAndDivisionExpression;
	private final ValueExpressionElements pValueExpression;
	private final VariableReferenceElements pVariableReference;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MathGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGlobalVariable = new GlobalVariableElements();
		this.pLocalVariable = new LocalVariableElements();
		this.pAdditionAndSubtractionExpression = new AdditionAndSubtractionExpressionElements();
		this.pMultiplicationAndDivisionExpression = new MultiplicationAndDivisionExpressionElements();
		this.pValueExpression = new ValueExpressionElements();
		this.pVariableReference = new VariableReferenceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mmmi.mdsd.Math".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    'program' name=ID
	//    variables+=GlobalVariable*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//GlobalVariable returns Variable:
	//    {GlobalVariable} 'var' name=ID '=' expression=AdditionAndSubtractionExpression;
	public GlobalVariableElements getGlobalVariableAccess() {
		return pGlobalVariable;
	}
	
	public ParserRule getGlobalVariableRule() {
		return getGlobalVariableAccess().getRule();
	}
	
	//LocalVariable returns Variable:
	//    {LocalVariable} 'let' name=ID '=' local_expression=AdditionAndSubtractionExpression 'in'
	//    expression=AdditionAndSubtractionExpression 'end';
	public LocalVariableElements getLocalVariableAccess() {
		return pLocalVariable;
	}
	
	public ParserRule getLocalVariableRule() {
		return getLocalVariableAccess().getRule();
	}
	
	//AdditionAndSubtractionExpression returns Expression:
	//    MultiplicationAndDivisionExpression (({Plus.left=current} '+' | {Minus.left=current} '-')
	//    right=MultiplicationAndDivisionExpression)*;
	public AdditionAndSubtractionExpressionElements getAdditionAndSubtractionExpressionAccess() {
		return pAdditionAndSubtractionExpression;
	}
	
	public ParserRule getAdditionAndSubtractionExpressionRule() {
		return getAdditionAndSubtractionExpressionAccess().getRule();
	}
	
	//MultiplicationAndDivisionExpression returns Expression:
	//    ValueExpression (({Multiplication.left=current} '*' | {Division.left=current} '/') right=ValueExpression)*;
	public MultiplicationAndDivisionExpressionElements getMultiplicationAndDivisionExpressionAccess() {
		return pMultiplicationAndDivisionExpression;
	}
	
	public ParserRule getMultiplicationAndDivisionExpressionRule() {
		return getMultiplicationAndDivisionExpressionAccess().getRule();
	}
	
	//ValueExpression returns Expression:
	//    {Parenthesis} '(' parenthesizedExpression=AdditionAndSubtractionExpression ')' | {Number} value=INT | LocalVariable
	//    | VariableReference;
	public ValueExpressionElements getValueExpressionAccess() {
		return pValueExpression;
	}
	
	public ParserRule getValueExpressionRule() {
		return getValueExpressionAccess().getRule();
	}
	
	//VariableReference:
	//    variable=[Variable];
	public VariableReferenceElements getVariableReferenceAccess() {
		return pVariableReference;
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
