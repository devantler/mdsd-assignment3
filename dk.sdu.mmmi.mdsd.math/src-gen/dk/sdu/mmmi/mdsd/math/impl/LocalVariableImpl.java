/**
 * generated by Xtext 2.26.0
 */
package dk.sdu.mmmi.mdsd.math.impl;

import dk.sdu.mmmi.mdsd.math.Expression;
import dk.sdu.mmmi.mdsd.math.LocalVariable;
import dk.sdu.mmmi.mdsd.math.MathPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Local Variable</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link dk.sdu.mmmi.mdsd.math.impl.LocalVariableImpl#getLocal_expression <em>Local expression</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LocalVariableImpl extends VariableImpl implements LocalVariable
{
  /**
   * The cached value of the '{@link #getLocal_expression() <em>Local expression</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLocal_expression()
   * @generated
   * @ordered
   */
  protected Expression local_expression;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LocalVariableImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MathPackage.Literals.LOCAL_VARIABLE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression getLocal_expression()
  {
    return local_expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLocal_expression(Expression newLocal_expression, NotificationChain msgs)
  {
    Expression oldLocal_expression = local_expression;
    local_expression = newLocal_expression;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MathPackage.LOCAL_VARIABLE__LOCAL_EXPRESSION, oldLocal_expression, newLocal_expression);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLocal_expression(Expression newLocal_expression)
  {
    if (newLocal_expression != local_expression)
    {
      NotificationChain msgs = null;
      if (local_expression != null)
        msgs = ((InternalEObject)local_expression).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MathPackage.LOCAL_VARIABLE__LOCAL_EXPRESSION, null, msgs);
      if (newLocal_expression != null)
        msgs = ((InternalEObject)newLocal_expression).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MathPackage.LOCAL_VARIABLE__LOCAL_EXPRESSION, null, msgs);
      msgs = basicSetLocal_expression(newLocal_expression, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MathPackage.LOCAL_VARIABLE__LOCAL_EXPRESSION, newLocal_expression, newLocal_expression));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MathPackage.LOCAL_VARIABLE__LOCAL_EXPRESSION:
        return basicSetLocal_expression(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MathPackage.LOCAL_VARIABLE__LOCAL_EXPRESSION:
        return getLocal_expression();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MathPackage.LOCAL_VARIABLE__LOCAL_EXPRESSION:
        setLocal_expression((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MathPackage.LOCAL_VARIABLE__LOCAL_EXPRESSION:
        setLocal_expression((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MathPackage.LOCAL_VARIABLE__LOCAL_EXPRESSION:
        return local_expression != null;
    }
    return super.eIsSet(featureID);
  }

} //LocalVariableImpl
