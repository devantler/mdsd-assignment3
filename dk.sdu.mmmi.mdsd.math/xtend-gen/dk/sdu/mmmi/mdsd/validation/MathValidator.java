/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.validation;

import com.google.common.base.Objects;
import dk.sdu.mmmi.mdsd.math.GlobalVariable;
import dk.sdu.mmmi.mdsd.math.MathPackage;
import dk.sdu.mmmi.mdsd.math.Model;
import dk.sdu.mmmi.mdsd.math.Variable;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class MathValidator extends AbstractMathValidator {
  @Check
  public void noRepeatedGlobalVariablwes(final GlobalVariable globalVariable) {
    EObject _rootContainer = EcoreUtil2.getRootContainer(globalVariable);
    final Model model = ((Model) _rootContainer);
    final EList<Variable> globalVariables = model.getVariables();
    int occurences = 0;
    for (final Variable gv : globalVariables) {
      String _name = gv.getName();
      String _name_1 = globalVariable.getName();
      boolean _equals = Objects.equal(_name, _name_1);
      if (_equals) {
        occurences++;
      }
    }
    if ((occurences > 1)) {
      this.error("Multiple global variables cannot share the same name.", globalVariable, MathPackage.Literals.VARIABLE__NAME);
    }
  }
}
