/**
 * generated by Xtext 2.25.0
 */
package dk.sdu.mmmi.mdsd.scoping;

import com.google.common.base.Objects;
import dk.sdu.mmmi.mdsd.math.GlobalVariable;
import dk.sdu.mmmi.mdsd.math.LocalVariable;
import dk.sdu.mmmi.mdsd.math.MathPackage;
import dk.sdu.mmmi.mdsd.math.Model;
import dk.sdu.mmmi.mdsd.math.Variable;
import java.util.Collections;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

@SuppressWarnings("all")
public class MathScopeProvider extends AbstractMathScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _switchResult = null;
    boolean _matched = false;
    if (Objects.equal(reference, MathPackage.Literals.VARIABLE_REFERENCE__VARIABLE)) {
      _matched=true;
      _switchResult = this.getVariableScope(context, true);
    }
    if (!_matched) {
      _switchResult = super.getScope(context, reference);
    }
    return _switchResult;
  }
  
  public IScope getVariableScope(final EObject object, final boolean first) {
    Variable _xifexpression = null;
    if (first) {
      _xifexpression = EcoreUtil2.<Variable>getContainerOfType(object, Variable.class);
    } else {
      _xifexpression = EcoreUtil2.<Variable>getContainerOfType(object.eContainer(), Variable.class);
    }
    final Variable nextVariable = _xifexpression;
    if ((nextVariable instanceof LocalVariable)) {
      return Scopes.scopeFor(Collections.<EObject>unmodifiableList(CollectionLiterals.<EObject>newArrayList(nextVariable)), this.getVariableScope(nextVariable, false));
    } else {
      return this.getGlobalVariableScope(((GlobalVariable) nextVariable));
    }
  }
  
  public IScope getGlobalVariableScope(final GlobalVariable globalVariable) {
    EObject _rootContainer = EcoreUtil2.getRootContainer(globalVariable);
    final Model model = ((Model) _rootContainer);
    final Function1<Variable, Boolean> _function = (Variable it) -> {
      String _name = it.getName();
      String _name_1 = globalVariable.getName();
      return Boolean.valueOf((_name != _name_1));
    };
    final List<Variable> globalVariables = IterableExtensions.<Variable>toList(IterableExtensions.<Variable>filter(model.getVariables(), _function));
    return Scopes.scopeFor(globalVariables);
  }
}
