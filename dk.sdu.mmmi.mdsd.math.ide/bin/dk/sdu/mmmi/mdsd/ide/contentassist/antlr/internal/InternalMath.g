/*
 * generated by Xtext 2.26.0
 */
grammar InternalMath;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package dk.sdu.mmmi.mdsd.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package dk.sdu.mmmi.mdsd.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import dk.sdu.mmmi.mdsd.services.MathGrammarAccess;

}
@parser::members {
	private MathGrammarAccess grammarAccess;

	public void setGrammarAccess(MathGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleGlobalVariable
entryRuleGlobalVariable
:
{ before(grammarAccess.getGlobalVariableRule()); }
	 ruleGlobalVariable
{ after(grammarAccess.getGlobalVariableRule()); } 
	 EOF 
;

// Rule GlobalVariable
ruleGlobalVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getGlobalVariableAccess().getGroup()); }
		(rule__GlobalVariable__Group__0)
		{ after(grammarAccess.getGlobalVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLocalVariable
entryRuleLocalVariable
:
{ before(grammarAccess.getLocalVariableRule()); }
	 ruleLocalVariable
{ after(grammarAccess.getLocalVariableRule()); } 
	 EOF 
;

// Rule LocalVariable
ruleLocalVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLocalVariableAccess().getGroup()); }
		(rule__LocalVariable__Group__0)
		{ after(grammarAccess.getLocalVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAdditionAndSubtractionExpression
entryRuleAdditionAndSubtractionExpression
:
{ before(grammarAccess.getAdditionAndSubtractionExpressionRule()); }
	 ruleAdditionAndSubtractionExpression
{ after(grammarAccess.getAdditionAndSubtractionExpressionRule()); } 
	 EOF 
;

// Rule AdditionAndSubtractionExpression
ruleAdditionAndSubtractionExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAndSubtractionExpressionAccess().getGroup()); }
		(rule__AdditionAndSubtractionExpression__Group__0)
		{ after(grammarAccess.getAdditionAndSubtractionExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicationAndDivisionExpression
entryRuleMultiplicationAndDivisionExpression
:
{ before(grammarAccess.getMultiplicationAndDivisionExpressionRule()); }
	 ruleMultiplicationAndDivisionExpression
{ after(grammarAccess.getMultiplicationAndDivisionExpressionRule()); } 
	 EOF 
;

// Rule MultiplicationAndDivisionExpression
ruleMultiplicationAndDivisionExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getGroup()); }
		(rule__MultiplicationAndDivisionExpression__Group__0)
		{ after(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValueExpression
entryRuleValueExpression
:
{ before(grammarAccess.getValueExpressionRule()); }
	 ruleValueExpression
{ after(grammarAccess.getValueExpressionRule()); } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueExpressionAccess().getAlternatives()); }
		(rule__ValueExpression__Alternatives)
		{ after(grammarAccess.getValueExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableReference
entryRuleVariableReference
:
{ before(grammarAccess.getVariableReferenceRule()); }
	 ruleVariableReference
{ after(grammarAccess.getVariableReferenceRule()); } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableReferenceAccess().getVariableAssignment()); }
		(rule__VariableReference__VariableAssignment)
		{ after(grammarAccess.getVariableReferenceAccess().getVariableAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionAndSubtractionExpression__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAndSubtractionExpressionAccess().getGroup_1_0_0()); }
		(rule__AdditionAndSubtractionExpression__Group_1_0_0__0)
		{ after(grammarAccess.getAdditionAndSubtractionExpressionAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditionAndSubtractionExpressionAccess().getGroup_1_0_1()); }
		(rule__AdditionAndSubtractionExpression__Group_1_0_1__0)
		{ after(grammarAccess.getAdditionAndSubtractionExpressionAccess().getGroup_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationAndDivisionExpression__Alternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getGroup_1_0_0()); }
		(rule__MultiplicationAndDivisionExpression__Group_1_0_0__0)
		{ after(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getGroup_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getGroup_1_0_1()); }
		(rule__MultiplicationAndDivisionExpression__Group_1_0_1__0)
		{ after(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getGroup_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueExpressionAccess().getGroup_0()); }
		(rule__ValueExpression__Group_0__0)
		{ after(grammarAccess.getValueExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueExpressionAccess().getGroup_1()); }
		(rule__ValueExpression__Group_1__0)
		{ after(grammarAccess.getValueExpressionAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueExpressionAccess().getLocalVariableParserRuleCall_2()); }
		ruleLocalVariable
		{ after(grammarAccess.getValueExpressionAccess().getLocalVariableParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getValueExpressionAccess().getVariableReferenceParserRuleCall_3()); }
		ruleVariableReference
		{ after(grammarAccess.getValueExpressionAccess().getVariableReferenceParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getProgramKeyword_0()); }
	'program'
	{ after(grammarAccess.getModelAccess().getProgramKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getNameAssignment_1()); }
	(rule__Model__NameAssignment_1)
	{ after(grammarAccess.getModelAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getVariablesAssignment_2()); }
	(rule__Model__VariablesAssignment_2)*
	{ after(grammarAccess.getModelAccess().getVariablesAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__GlobalVariable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GlobalVariable__Group__0__Impl
	rule__GlobalVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVariable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalVariableAccess().getGlobalVariableAction_0()); }
	()
	{ after(grammarAccess.getGlobalVariableAccess().getGlobalVariableAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVariable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GlobalVariable__Group__1__Impl
	rule__GlobalVariable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVariable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalVariableAccess().getVarKeyword_1()); }
	'var'
	{ after(grammarAccess.getGlobalVariableAccess().getVarKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVariable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GlobalVariable__Group__2__Impl
	rule__GlobalVariable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVariable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalVariableAccess().getNameAssignment_2()); }
	(rule__GlobalVariable__NameAssignment_2)
	{ after(grammarAccess.getGlobalVariableAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVariable__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GlobalVariable__Group__3__Impl
	rule__GlobalVariable__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVariable__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalVariableAccess().getEqualsSignKeyword_3()); }
	'='
	{ after(grammarAccess.getGlobalVariableAccess().getEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVariable__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__GlobalVariable__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVariable__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getGlobalVariableAccess().getExpressionAssignment_4()); }
	(rule__GlobalVariable__ExpressionAssignment_4)
	{ after(grammarAccess.getGlobalVariableAccess().getExpressionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LocalVariable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LocalVariable__Group__0__Impl
	rule__LocalVariable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocalVariableAccess().getLocalVariableAction_0()); }
	()
	{ after(grammarAccess.getLocalVariableAccess().getLocalVariableAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LocalVariable__Group__1__Impl
	rule__LocalVariable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocalVariableAccess().getLetKeyword_1()); }
	'let'
	{ after(grammarAccess.getLocalVariableAccess().getLetKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LocalVariable__Group__2__Impl
	rule__LocalVariable__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocalVariableAccess().getNameAssignment_2()); }
	(rule__LocalVariable__NameAssignment_2)
	{ after(grammarAccess.getLocalVariableAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LocalVariable__Group__3__Impl
	rule__LocalVariable__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocalVariableAccess().getEqualsSignKeyword_3()); }
	'='
	{ after(grammarAccess.getLocalVariableAccess().getEqualsSignKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LocalVariable__Group__4__Impl
	rule__LocalVariable__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocalVariableAccess().getLocal_expressionAssignment_4()); }
	(rule__LocalVariable__Local_expressionAssignment_4)
	{ after(grammarAccess.getLocalVariableAccess().getLocal_expressionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LocalVariable__Group__5__Impl
	rule__LocalVariable__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocalVariableAccess().getInKeyword_5()); }
	'in'
	{ after(grammarAccess.getLocalVariableAccess().getInKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LocalVariable__Group__6__Impl
	rule__LocalVariable__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocalVariableAccess().getExpressionAssignment_6()); }
	(rule__LocalVariable__ExpressionAssignment_6)
	{ after(grammarAccess.getLocalVariableAccess().getExpressionAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LocalVariable__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLocalVariableAccess().getEndKeyword_7()); }
	'end'
	{ after(grammarAccess.getLocalVariableAccess().getEndKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionAndSubtractionExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionAndSubtractionExpression__Group__0__Impl
	rule__AdditionAndSubtractionExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionAndSubtractionExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAndSubtractionExpressionAccess().getMultiplicationAndDivisionExpressionParserRuleCall_0()); }
	ruleMultiplicationAndDivisionExpression
	{ after(grammarAccess.getAdditionAndSubtractionExpressionAccess().getMultiplicationAndDivisionExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionAndSubtractionExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionAndSubtractionExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionAndSubtractionExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAndSubtractionExpressionAccess().getGroup_1()); }
	(rule__AdditionAndSubtractionExpression__Group_1__0)*
	{ after(grammarAccess.getAdditionAndSubtractionExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionAndSubtractionExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionAndSubtractionExpression__Group_1__0__Impl
	rule__AdditionAndSubtractionExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionAndSubtractionExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAndSubtractionExpressionAccess().getAlternatives_1_0()); }
	(rule__AdditionAndSubtractionExpression__Alternatives_1_0)
	{ after(grammarAccess.getAdditionAndSubtractionExpressionAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionAndSubtractionExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionAndSubtractionExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionAndSubtractionExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAndSubtractionExpressionAccess().getRightAssignment_1_1()); }
	(rule__AdditionAndSubtractionExpression__RightAssignment_1_1)
	{ after(grammarAccess.getAdditionAndSubtractionExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionAndSubtractionExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionAndSubtractionExpression__Group_1_0_0__0__Impl
	rule__AdditionAndSubtractionExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionAndSubtractionExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAndSubtractionExpressionAccess().getPlusLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getAdditionAndSubtractionExpressionAccess().getPlusLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionAndSubtractionExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionAndSubtractionExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionAndSubtractionExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAndSubtractionExpressionAccess().getPlusSignKeyword_1_0_0_1()); }
	'+'
	{ after(grammarAccess.getAdditionAndSubtractionExpressionAccess().getPlusSignKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AdditionAndSubtractionExpression__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionAndSubtractionExpression__Group_1_0_1__0__Impl
	rule__AdditionAndSubtractionExpression__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionAndSubtractionExpression__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAndSubtractionExpressionAccess().getMinusLeftAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getAdditionAndSubtractionExpressionAccess().getMinusLeftAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionAndSubtractionExpression__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AdditionAndSubtractionExpression__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionAndSubtractionExpression__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAndSubtractionExpressionAccess().getHyphenMinusKeyword_1_0_1_1()); }
	'-'
	{ after(grammarAccess.getAdditionAndSubtractionExpressionAccess().getHyphenMinusKeyword_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationAndDivisionExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationAndDivisionExpression__Group__0__Impl
	rule__MultiplicationAndDivisionExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationAndDivisionExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getValueExpressionParserRuleCall_0()); }
	ruleValueExpression
	{ after(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getValueExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationAndDivisionExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationAndDivisionExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationAndDivisionExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getGroup_1()); }
	(rule__MultiplicationAndDivisionExpression__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationAndDivisionExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationAndDivisionExpression__Group_1__0__Impl
	rule__MultiplicationAndDivisionExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationAndDivisionExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getAlternatives_1_0()); }
	(rule__MultiplicationAndDivisionExpression__Alternatives_1_0)
	{ after(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getAlternatives_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationAndDivisionExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationAndDivisionExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationAndDivisionExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getRightAssignment_1_1()); }
	(rule__MultiplicationAndDivisionExpression__RightAssignment_1_1)
	{ after(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationAndDivisionExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationAndDivisionExpression__Group_1_0_0__0__Impl
	rule__MultiplicationAndDivisionExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationAndDivisionExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getMultiplicationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getMultiplicationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationAndDivisionExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationAndDivisionExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationAndDivisionExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getAsteriskKeyword_1_0_0_1()); }
	'*'
	{ after(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getAsteriskKeyword_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicationAndDivisionExpression__Group_1_0_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationAndDivisionExpression__Group_1_0_1__0__Impl
	rule__MultiplicationAndDivisionExpression__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationAndDivisionExpression__Group_1_0_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getDivisionLeftAction_1_0_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getDivisionLeftAction_1_0_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationAndDivisionExpression__Group_1_0_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicationAndDivisionExpression__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationAndDivisionExpression__Group_1_0_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getSolidusKeyword_1_0_1_1()); }
	'/'
	{ after(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getSolidusKeyword_1_0_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpression__Group_0__0__Impl
	rule__ValueExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionAccess().getParenthesisAction_0_0()); }
	()
	{ after(grammarAccess.getValueExpressionAccess().getParenthesisAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpression__Group_0__1__Impl
	rule__ValueExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionAccess().getLeftParenthesisKeyword_0_1()); }
	'('
	{ after(grammarAccess.getValueExpressionAccess().getLeftParenthesisKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpression__Group_0__2__Impl
	rule__ValueExpression__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionAccess().getParenthesizedExpressionAssignment_0_2()); }
	(rule__ValueExpression__ParenthesizedExpressionAssignment_0_2)
	{ after(grammarAccess.getValueExpressionAccess().getParenthesizedExpressionAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpression__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionAccess().getRightParenthesisKeyword_0_3()); }
	')'
	{ after(grammarAccess.getValueExpressionAccess().getRightParenthesisKeyword_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ValueExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpression__Group_1__0__Impl
	rule__ValueExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionAccess().getNumberAction_1_0()); }
	()
	{ after(grammarAccess.getValueExpressionAccess().getNumberAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ValueExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getValueExpressionAccess().getValueAssignment_1_1()); }
	(rule__ValueExpression__ValueAssignment_1_1)
	{ after(grammarAccess.getValueExpressionAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getModelAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__VariablesAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getVariablesGlobalVariableParserRuleCall_2_0()); }
		ruleGlobalVariable
		{ after(grammarAccess.getModelAccess().getVariablesGlobalVariableParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVariable__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalVariableAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getGlobalVariableAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__GlobalVariable__ExpressionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getGlobalVariableAccess().getExpressionAdditionAndSubtractionExpressionParserRuleCall_4_0()); }
		ruleAdditionAndSubtractionExpression
		{ after(grammarAccess.getGlobalVariableAccess().getExpressionAdditionAndSubtractionExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLocalVariableAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getLocalVariableAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__Local_expressionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLocalVariableAccess().getLocal_expressionAdditionAndSubtractionExpressionParserRuleCall_4_0()); }
		ruleAdditionAndSubtractionExpression
		{ after(grammarAccess.getLocalVariableAccess().getLocal_expressionAdditionAndSubtractionExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LocalVariable__ExpressionAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLocalVariableAccess().getExpressionAdditionAndSubtractionExpressionParserRuleCall_6_0()); }
		ruleAdditionAndSubtractionExpression
		{ after(grammarAccess.getLocalVariableAccess().getExpressionAdditionAndSubtractionExpressionParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AdditionAndSubtractionExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAndSubtractionExpressionAccess().getRightMultiplicationAndDivisionExpressionParserRuleCall_1_1_0()); }
		ruleMultiplicationAndDivisionExpression
		{ after(grammarAccess.getAdditionAndSubtractionExpressionAccess().getRightMultiplicationAndDivisionExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicationAndDivisionExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getRightValueExpressionParserRuleCall_1_1_0()); }
		ruleValueExpression
		{ after(grammarAccess.getMultiplicationAndDivisionExpressionAccess().getRightValueExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__ParenthesizedExpressionAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueExpressionAccess().getParenthesizedExpressionAdditionAndSubtractionExpressionParserRuleCall_0_2_0()); }
		ruleAdditionAndSubtractionExpression
		{ after(grammarAccess.getValueExpressionAccess().getParenthesizedExpressionAdditionAndSubtractionExpressionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ValueExpression__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueExpressionAccess().getValueINTTerminalRuleCall_1_1_0()); }
		RULE_INT
		{ after(grammarAccess.getValueExpressionAccess().getValueINTTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__VariableAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableReferenceAccess().getVariableVariableCrossReference_0()); }
		(
			{ before(grammarAccess.getVariableReferenceAccess().getVariableVariableIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVariableReferenceAccess().getVariableVariableIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getVariableReferenceAccess().getVariableVariableCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
